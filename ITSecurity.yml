12June2024
https://www.ssl.com/


SSL:
    SSL (Secure Sockets Layer) and its successor, TLS (Transport Layer Security), are protocols for establishing authenticated and encrypted links between networked computers.
    Although the SSL protocol was deprecated with the release of TLS 1.0 in 1999, it is still common to refer to these related technologies as “SSL” or “SSL/TLS.”

SSL certificate:
    An SSL certificate (also known as a TLS or SSL/TLS certificate) is a digital document that binds the identity of a website to a cryptographic key pair consisting of a public key and a private key. The public key, included in the certificate, allows a web browser to initiate an encrypted communication session with a web server via the TLS and HTTPS protocols. The private key is kept secure on the server, and is used to digitally sign web pages and other documents (such as images and JavaScript files).
    An SSL certificate also includes identifying information about a website, including its domain name and, optionally, identifying information about the site’s owner. If the web server’s SSL certificate is signed by a publicly trusted certificate authority (CA), like SSL.com, digitally signed content from the server will be trusted by end users’ web browsers and operating systems as authentic.

TLS:
    TLS (Transport Layer Security), released in 1999, is the successor to the SSL (Secure Sockets Layer) protocol for authentication and encryption.
    TLS 1.3 is defined in in RFC 8446 (August 2018).
    
    - Do I need a dedicated IP address to use SSL/TLS?
        At one time it was a mandatory requirement to have a dedicated IP for each SSL certificate on a web server. This is no longer the case due to a technology called Server Name Indication (SNI). Your hosting platform will specifically have to support SNI. You can find out more information about SNI in this SSL.com article.
        
    - What port is recommended to use SSL/TLS over?
        For maximum compatibility, port 443 is the standard, thus recommended, port used for secured SSL/TLS communications. However, any port can be used.
        
    - What is the current version of SSL/TLS?
        TLS 1.3, defined in August 2018 by RFC 8446, is the most recent version of SSL/TLS. TLS 1.2 (RFC 5246) was defined in August 2008 and also remains in wide use. Versions of SSL/TLS prior to TLS 1.2 are considered insecure and should no longer be used.
        
    - What are the security issues with older versions of TLS?
        TLS versions 1.0 and 1.1 are affected by a large number of protocol and implementation vulnerabilities that have been published by security researchers in the last two decades. Attacks like ROBOT affected the RSA key exchange algorithm, while LogJam and WeakDH showed that many TLS servers could be tricked into using incorrect parameters for other key exchange methods. Compromising a key exchange allows attackers to completely compromise network security and decrypt conversations.
        
        Attacks on symmetric ciphers, such as BEAST or Lucky13, have demonstrated that various ciphers supported in TLS 1.2 and earlier, with examples including RC4 or CBC-mode ciphers, are not secure.
        
        Even signatures were affected, with Bleichenbacher’s RSA signature forgery attack and other similar padding attacks.
        
        Most of these attacks have been mitigated in TLS 1.2 (provided that TLS instances are configured correctly), even though TLS 1.2 is still vulnerable to downgrade attacks, such as POODLE, FREAK, or CurveSwap. This is due to the fact that all versions of the TLS protocol prior to 1.3 don’t protect the handshake negotiation (which decides the protocol version that will be used throughout the exchange).

SSL/TLS works by:
        by binding the identities of entities such as websites and companies to cryptographic key pairs via digital documents known as X.509 certificates. 
        Each key pair consists of a private key and a public key. The private key is kept secure, and the public key can be widely distributed via a certificate.
        Also, the holder of the private key can use it to sign other digital documents (such as web pages), and anyone with the public key can verify this signature.
        If the SSL/TLS certificate itself is signed by a publicly trusted certificate authority (CA), such as SSL.com, the certificate will be implicitly trusted by client software such as web browsers and operating systems.
        
        Via the SSL/TLS handshake: the private and public keys can be used with a publicly trusted certificate to negotiate an encrypted and authenticated communication session over the internet, even between two parties who have never met. This simple fact is the foundation of secure web browsing and electronic commerce as it is known today.

SSL/TLS and Secure Web Browsing:
    The most common and well-known use of SSL/TLS is secure web browsing via the HTTPS protocol.
    A properly configured public HTTPS website includes an SSL/TLS certificate that is signed by a publicly trusted CA.
    Users visiting an HTTPS website can be assured of:
        - Authenticity: The server presenting the certificate is in possession of the private key that matches the public key in the certificate.
        - Integrity: Documents signed by the certificate (e.g. web pages) have not been altered in transit by a man in the middle.
        - Encryption: Communications between the client and server are encrypted.

Obtaining an SSL/TLS Certificate:
    # https://www.ssl.com/faqs/faq-what-is-ssl/
    Securing the website. The basic procedure for requesting a publicly trusted SSL/TLS website certificate is as follows:
    1. The person or organization requesting the certificate generates a pair of public and private keys, preferably on the server to be protected.
    2. The public key, along with the domain name(s) to be protected and (for OV and EV certificates) organizational information about the company  
       requesting the certificate, is used to generate a certificate signing request (CSR).
        - Please see this FAQ for instructions on generating a keypair and CSR on many server platforms.
    3. The CSR is sent to a publicly trusted CA (such as SSL.com). The CA validates the information in the CSR and generates a signed certificate that can be installed on the requester’s web server.
        - For instructions on ordering SSL/TLS certificates from SSL.com, please see this how-to.

    SSL/TLS certificates vary depending on the validation methods used and the level of trust they confer, with extended validation (EV) offering the highest level of trust. For information on the differences between the major validation methods (DV, OV, and EV), please refer to our article, DV, OV, and EV certificates.

# =================== X.509 Certificate =================
X.509 Certificate:
    X.509 is a standard format for public key certificates, digital documents that securely associate cryptographic key pairs with identities such as websites, individuals, or organizations. 
    RFC 5280 profiles the X.509 v3 certificate, the X.509 v2 certificate revocation list (CRL), and describes an algorithm for X.509 certificate path validation.

X.509 certificates used for:
    Common applications of X.509 certificates include SSL/TLS and HTTPS for authenticated and encrypted web browsing, signed and encrypted email via the S/MIME protocol, code signing, document signing, client authentication, and government-issued electronic ID.

    Common applications of X.509 certificates include:
        - SSL/TLS and HTTPS for authenticated and encrypted web browsing
        - Signed and encrypted email via the S/MIME protocol
        - Code signing
        - Document signing
        - Client authentication
        - Government-issued electronic ID

Key Pairs and Signatures:
    No matter its intended application(s), each X.509 certificate includes a public key, digital signature, and information about both the identity associated with the certificate and its issuing certificate authority (CA)

    - The public key is part of a key pair that also includes a private key.
      The private key is kept secure, and the public key is included in the certificate. This public/private key pair:
        - Allows the owner of the private key to digitally sign documents; these signatures can be verified by anyone with the corresponding public key.
        - Allows third parties to send messages encrypted with the public key that only the owner of the private key can decrypt.
    - A digital signature is an encoded hash (fixed-length digest) of a document that has been encrypted with a private key.
      When an X.509 certificate is signed by a publicly trusted CA, such as SSL.com, the certificate can be used by a third party to verify the identity of the entity presenting it.
        Note: Not all applications of X.509 certificates require public trust. For example, a company can issue its own privately trusted certificates for internal use. For more information, please read our article on Private vs. Public PKI.
    - Each X.509 certificate includes fields specifying the subject, issuing CA, and other required information such as the certificate’s version and validity period. In addition, v3 certificates contain a set of extensions that define properties such as acceptable key usages and additional identities to bind a key pair to.

    Terms applicable:
        - Certificate Fields and Extensions
        - Certificate Chains
        - Revocation

    X.509 history:
        First introduced in 1988 alongside the X.500 standards for electronic directory services, X.509 has been adapted for internet use by the IETF’s Public-Key Infrastructure (X.509) (PKIX) working group. RFC 5280 profiles the X.509 v3 certificate, the X.509 v2 certificate revocation list (CRL), and describes an algorithm for X.509 certificate path validation.














